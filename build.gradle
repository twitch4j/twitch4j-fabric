import net.fabricmc.loom.task.RemapJarTask
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

plugins {
    id 'fabric-loom' version '1.8-SNAPSHOT'
    id "com.modrinth.minotaur" version "2.+"
    id 'maven-publish'
    id 'signing'
}

def CHANGELOG = new File('CHANGELOG.md').exists() ? new File('CHANGELOG.md').text : ""

archivesBaseName = project.archives_base_name
version = "${project.library_version}+${project.mod_version}"
group = project.maven_group

repositories {}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    testImplementation(platform("org.junit:junit-bom:5.9.2"))
    testImplementation("org.junit.jupiter:junit-jupiter")

    include modApi("com.github.twitch4j:twitch4j:${project.library_version}") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    include "com.github.twitch4j:twitch4j-auth:${project.library_version}"
    include "com.github.twitch4j:twitch4j-chat:${project.library_version}"
    include "com.github.twitch4j:twitch4j-client-websocket:${project.library_version}"
    include "com.github.twitch4j:twitch4j-common:${project.library_version}"
    include "com.github.twitch4j:twitch4j-eventsub-common:${project.library_version}"
    include "com.github.twitch4j:twitch4j-eventsub-websocket:${project.library_version}"
    include "com.github.twitch4j:twitch4j-extensions:${project.library_version}"
    include "com.github.twitch4j:twitch4j-graphql:${project.library_version}"
    include "com.github.twitch4j:twitch4j-helix:${project.library_version}"
    include "com.github.twitch4j:twitch4j-kraken:${project.library_version}"
    include "com.github.twitch4j:twitch4j-messaginginterface:${project.library_version}"
    include "com.github.twitch4j:twitch4j-pubsub:${project.library_version}"
    include "com.github.twitch4j:twitch4j-util:${project.library_version}"

    var apollo = "2.5.14"
    var events4j = "0.12.2"
    var jackson = "2.18.2"
    var openfeign = "13.5"
    var xanthic = "0.7.1"

    include "com.apollographql.apollo:apollo-api-jvm:$apollo"
    include "com.apollographql.apollo:apollo-http-cache-api:$apollo"
    include "com.apollographql.apollo:apollo-normalized-cache-api-jvm:$apollo"
    include "com.apollographql.apollo:apollo-normalized-cache-jvm:$apollo"
    include "com.apollographql.apollo:apollo-runtime:$apollo"
    include "com.benasher44:uuid-jvm:0.2.0"
    include "com.bucket4j:bucket4j_jdk8-core:8.10.1"
    include "com.fasterxml.jackson.core:jackson-annotations:$jackson"
    include "com.fasterxml.jackson.core:jackson-core:$jackson"
    include "com.fasterxml.jackson.core:jackson-databind:$jackson"
    include "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson"
    include "com.github.ben-manes.caffeine:caffeine:2.9.3"
    include "com.github.philippheuer.credentialmanager:credentialmanager:0.3.1"
    include "com.github.philippheuer.events4j:events4j-api:$events4j"
    include "com.github.philippheuer.events4j:events4j-core:$events4j"
    include "com.github.philippheuer.events4j:events4j-handler-simple:$events4j"
    include "com.github.tony19:named-regexp:1.0.0"
    include "com.google.errorprone:error_prone_annotations:2.10.0"
    include "com.neovisionaries:nv-websocket-client:2.14"
    include "com.netflix.archaius:archaius-core:0.4.1"
    include "com.netflix.hystrix:hystrix-core:1.5.18"
    include "com.nytimes.android:cache:2.0.2"
    include "com.squareup.okhttp3:okhttp:4.12.0"
    include "com.squareup.okio:okio-jvm:3.6.0"
    include "commons-configuration:commons-configuration:1.10"
    include "commons-lang:commons-lang:2.6"
    include "io.github.openfeign:feign-core:$openfeign"
    include "io.github.openfeign:feign-hystrix:$openfeign"
    include "io.github.openfeign:feign-jackson:$openfeign"
    include "io.github.openfeign:feign-okhttp:$openfeign"
    include "io.github.openfeign:feign-slf4j:$openfeign"
    include "io.github.xanthic.cache:cache-api:$xanthic"
    include "io.github.xanthic.cache:cache-core:$xanthic"
    include "io.github.xanthic.cache:cache-provider-caffeine:$xanthic"
    include "io.reactivex:rxjava:1.2.0"
    include "net.fabricmc:fabric-language-kotlin:1.10.19+kotlin.1.9.23"
    include "org.hdrhistogram:HdrHistogram:2.1.9"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 8
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

tasks.register('emptyJavadocJar', Jar) {
    archiveClassifier.set('javadoc')
}

tasks.register('emptySourcesJar', Jar) {
    archiveClassifier.set('sources')
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java

            artifact(emptySourcesJar) {
                classifier = 'sources'
                builtBy emptySourcesJar
            }
            artifact(emptyJavadocJar) {
                classifier = 'javadoc'
                builtBy emptyJavadocJar
            }

            pom {
                name = 'twitch4j-fabric'
                description = 'Twitch4J packed as a Fabric Mod'
                url = 'https://twitch4j.github.io'
                issueManagement {
                    system = "GitHub"
                    url = "https://github.com/twitch4j/twitch4j-fabric/issues"
                }
                licenses {
                    license {
                        name = 'MIT Licence'
                        distribution = 'repo'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'PhilippHeuer'
                        name = 'Philipp Heuer'
                        email = 'git@philippheuer.me'
                        roles = ['maintainer']
                    }
                    developer {
                        id = 'iProdigy'
                        name = 'Sidd'
                        roles = ['maintainer']
                    }
                    developer {
                        id = 'AwakenedRedstone'
                        name = 'Awakened Redstone'
                        roles = ['maintainer']
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/twitch4j/twitch4j-fabric.git'
                    developerConnection = 'scm:git:git@github.com:twitch4j/twitch4j-fabric.git'
                    url = 'https://github.com/twitch4j/twitch4j-fabric'
                }
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        //mavenLocal()
        maven {
            url = project.findProperty("mavenRepoUrl")
            credentials {
                username = project.findProperty("mavenRepoUsername")
                password = project.findProperty("mavenRepoPassword")
            }
        }
    }
}

tasks.named("generateMetadataFileForMavenJavaPublication") {
    dependsOn tasks.named("emptySourcesJar"), tasks.named("emptyJavadocJar")
}

def signingKey = project.findProperty("signingKey")
def signingPassword = project.findProperty("signingPassword")

signing {
    // use in-memory signing
    if (signingKey != null) {
        def decodedSigningKey = new String(Base64.decoder.decode(signingKey.toString()), "UTF-8")
        useInMemoryPgpKeys(decodedSigningKey, (String) signingPassword)
    } else {
        required = false // only sign when credentials are configured
        if (!project.hasProperty("gnupg.skip")) {
            useGpgCmd()
        }
    }
    sign publishing.publications.mavenJava
}

tasks.register('remapMavenJar', RemapJarTask) {
    dependsOn jar
    input = jar.archiveFile
    archiveFileName = "${archivesBaseName}-${project.version}-maven.jar"
    addNestedDependencies = false
}

build.dependsOn remapMavenJar
tasks.modrinth.dependsOn(tasks.remapMavenJar)

modrinth {
    def json = new URL("https://meta.fabricmc.net/v2/versions/game").text
    def versions = new JsonSlurper().parseText(json)
    def minecraftVersions = new ArrayList<String>()
    for (def version : versions) {
        if (version.stable) {
            minecraftVersions.add(version.version)
        }
    }

    String projectVersion = project.version.toString()
    List<String> projectVersionNumber = projectVersion.split("-", 2)
    String projectVersionName = "Release ${projectVersionNumber[0]}"
    if (projectVersionNumber.size() == 2) {
        List<String> typeNumber = projectVersionNumber[1].split("\\.", 2)
        if (projectVersionNumber[1].startsWith("rc")) {
            projectVersionName = "${projectVersionNumber[0]} - Release Candidate ${typeNumber[1]}"
            versionType = "beta" //Modrinth doesn't have RC so I use beta
        } else if (projectVersionNumber[1].startsWith("beta")) {
            projectVersionName = "${projectVersionNumber[0]} - Beta ${typeNumber[1]}"
            versionType = "beta"
        } else if (projectVersionNumber[1].startsWith("alpha")) {
            projectVersionName = "${projectVersionNumber[0]} - Alpha ${typeNumber[1]}"
            versionType = "alpha"
        }
    }

    token = System.getenv("MODRINTH_TOKEN")
    projectId = "CmHD69Pj"
    versionName = projectVersionName
    changelog = "### The Twitch4J changelog can be seen at https://github.com/twitch4j/twitch4j/releases/tag/v${project.library_version}\n\n" + CHANGELOG
    gameVersions = minecraftVersions
    loaders = ["fabric", "quilt"]
    uploadFile = remapJar
}

tasks.register('checkVersion') {
    doFirst {
        def xml = new URL("https://maven.awakenedredstone.com/com/github/twitch4j/twitch4j-fabric/maven-metadata.xml").text
        def metadata = new XmlSlurper().parseText(xml)
        def versions = metadata.versioning.versions.version*.text()
        if (versions.contains(version)) {
            throw new RuntimeException("${version} has already been released!")
        }
    }
}

publish.dependsOn checkVersion
